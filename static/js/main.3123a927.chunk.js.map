{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","monster","id","alt","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","target","setState","searchField","value","handleSubmit","event","newMonsters","toConsumableArray","state","push","preventDefault","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","onSubmit","card_list_component_CardList","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"gUAKaA,SAAO,SAACC,GAAD,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,0BACHC,IAAI,YAENR,EAAAC,EAAAC,cAAA,cAAMH,EAAMO,QAAQG,KAApB,KACAT,EAAAC,EAAAC,cAAA,cAAMH,EAAMO,QAAQI,UCLXC,SAAW,SAACZ,GACvB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACrBJ,EAAMa,SAASC,IAAI,SAACP,GAAD,OAClBN,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKT,EAAQC,GAAID,QAASA,SCNvBU,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,aAAhB,OACvBnB,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACViB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwECG,qBAzEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAiBFP,aAAe,SAACW,GACQ,WAAlBA,EAAEC,OAAOX,KACXG,EAAKS,SAAS,CAAEC,YAAaH,EAAEC,OAAOG,QACX,SAAlBJ,EAAEC,OAAOX,MAClBG,EAAKS,SAAS,CAAEE,MAAOJ,EAAEC,OAAOG,SAtBtBX,EA2BdY,aAAe,SAACC,GACd,IAAMC,EAAWb,OAAAc,EAAA,EAAAd,CAAOD,EAAKgB,MAAM3B,UAEnCyB,EAAYG,KAAK,CACf/B,KAAMc,EAAKgB,MAAML,QAGnBX,EAAKS,SAAS,CAAEpB,SAAUyB,IAC1BD,EAAMK,kBAhCNlB,EAAKgB,MAAQ,CACX3B,SAAU,GACVsB,MAAO,GACPD,YAAa,IANHV,mFAWM,IAAAmB,EAAAhB,KAClBiB,MAAM,8CACHC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GAAD,OAAWL,EAAKV,SAAS,CAAEpB,SAAUmC,uCAwBtC,IAAAC,EAC2BtB,KAAKa,MAA/B3B,EADDoC,EACCpC,SAAUqB,EADXe,EACWf,YACZgB,EAAmBrC,EAASsC,OAAO,SAAC5C,GAAD,OACvCA,EAAQG,KAAK0C,cAAcC,SAASnB,EAAYkB,iBAElD,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEbH,EAAAC,EAAAC,cAACmD,EAAD,CACEnC,YAAY,kBACZC,aAAcO,KAAKP,eAIrBnB,EAAAC,EAAAC,cAAA,QAAMoD,SAAU5B,KAAKS,cACnBnC,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,SACEgB,YAAY,iBACZE,KAAK,OACLc,MAAOR,KAAKa,MAAML,MAClBb,SAAUK,KAAKP,gBAGnBnB,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,SAASc,MAAM,aAG/BlC,EAAAC,EAAAC,cAACqD,EAAD,CAAU3C,SAAUqC,YApEVO,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA9B,EAAA,GAAAc,KAAAgB,EAAAC,KAAA,UAAqBjB,KAAK,SAAA3B,GAAiD,IAA9C6C,EAA8C7C,EAA9C6C,OAAQC,EAAsC9C,EAAtC8C,OAAQC,EAA8B/C,EAA9B+C,OAAQC,EAAsBhD,EAAtBgD,OAAQC,EAAcjD,EAAdiD,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDdS,IAASC,OACPpE,EAAAC,EAAAC,cAACF,EAAAC,EAAMoE,WAAP,KACErE,EAAAC,EAAAC,cAACoE,EAAD,OAEFC,SAASC,eAAe,SAM1Bf","file":"static/js/main.3123a927.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\n// Card component creates the card itself, and is rendered\n// by the card-list component\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      alt=\"monster\"\n    />\n    <h2> {props.monster.name} </h2>\n    <h2> {props.monster.email}</h2>\n  </div>\n);\n","import React from \"react\";\n\nimport { Card } from '../card/card.component'\n\nimport \"./card-list.styles.css\";\n\n// CardList renders the cards component  \nexport const CardList = (props) => {\n  return <div className=\"card-list\">\n  {props.monsters.map((monster) => (\n    <Card key={monster.id} monster={monster}></Card>\n  ))}\n  </div>;\n};\n","import React from \"react\";\n\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import React, { Component } from \"react\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      value: \"\",\n      searchField: \"\",\n    };\n  }\n\n  // When the component is loaded, call this method\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  // Handle form to create monsters\n  handleChange = (e) => {\n    if (e.target.type === \"search\") {\n      this.setState({ searchField: e.target.value });\n    } else if (e.target.type === \"text\") {\n      this.setState({ value: e.target.value });\n    }\n  };\n\n  // Handle form when submitted to create monsters\n  handleSubmit = (event) => {\n    const newMonsters = [...this.state.monsters];\n\n    newMonsters.push({\n      name: this.state.value,\n    });\n\n    this.setState({ monsters: newMonsters });\n    event.preventDefault();\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <div className=\"search-boxes\">\n          {/* INPUT SEARCHFIELD TO FILTER  */}\n          <SearchBox\n            placeholder=\"search monsters\"\n            handleChange={this.handleChange}\n          ></SearchBox>\n\n          {/* FORM TO CREATE MONSTER */}\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Monster:\n              <input\n                placeholder=\"CREATE MONSTER\"\n                type=\"text\"\n                value={this.state.value}\n                onChange={this.handleChange}\n              />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}